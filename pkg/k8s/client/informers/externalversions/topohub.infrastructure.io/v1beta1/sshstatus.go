// Copyright 2024 Authors of infrastructure-io
// SPDX-License-Identifier: Apache-2.0

// Code generated by informer-gen. DO NOT EDIT.

package v1beta1

import (
	context "context"
	time "time"

	apistopohubinfrastructureiov1beta1 "github.com/infrastructure-io/topohub/pkg/k8s/apis/topohub.infrastructure.io/v1beta1"
	versioned "github.com/infrastructure-io/topohub/pkg/k8s/client/clientset/versioned"
	internalinterfaces "github.com/infrastructure-io/topohub/pkg/k8s/client/informers/externalversions/internalinterfaces"
	topohubinfrastructureiov1beta1 "github.com/infrastructure-io/topohub/pkg/k8s/client/listers/topohub.infrastructure.io/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// SSHStatusInformer provides access to a shared informer and lister for
// SSHStatuses.
type SSHStatusInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() topohubinfrastructureiov1beta1.SSHStatusLister
}

type sSHStatusInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewSSHStatusInformer constructs a new informer for SSHStatus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewSSHStatusInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredSSHStatusInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredSSHStatusInformer constructs a new informer for SSHStatus type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredSSHStatusInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopohubV1beta1().SSHStatuses().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.TopohubV1beta1().SSHStatuses().Watch(context.TODO(), options)
			},
		},
		&apistopohubinfrastructureiov1beta1.SSHStatus{},
		resyncPeriod,
		indexers,
	)
}

func (f *sSHStatusInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredSSHStatusInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *sSHStatusInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apistopohubinfrastructureiov1beta1.SSHStatus{}, f.defaultInformer)
}

func (f *sSHStatusInformer) Lister() topohubinfrastructureiov1beta1.SSHStatusLister {
	return topohubinfrastructureiov1beta1.NewSSHStatusLister(f.Informer().GetIndexer())
}
